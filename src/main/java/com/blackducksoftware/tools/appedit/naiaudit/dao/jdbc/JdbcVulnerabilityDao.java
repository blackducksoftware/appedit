package com.blackducksoftware.tools.appedit.naiaudit.dao.jdbc;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.BadSqlGrammarException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;

import com.blackducksoftware.tools.appedit.core.exception.AppEditException;
import com.blackducksoftware.tools.appedit.naiaudit.dao.VulnerabilityDao;
import com.blackducksoftware.tools.connector.codecenter.common.RequestVulnerabilityPojo;
import com.blackducksoftware.tools.connector.codecenter.common.VulnerabilitySeverity;

public class JdbcVulnerabilityDao implements VulnerabilityDao {
	private final Logger logger = LoggerFactory.getLogger(this.getClass().getName());
	private static final String SQL_FETCH_ONE_VULNERABILITY_BY_ID = "SELECT nvd_cve_id, name, status, dsc, comments, cvss_base_score, cvss_exploit_subscore, cvss_impact_subscore, severity, published, modified, created, updated FROM vulnerabilities WHERE nvd_cve_id = :vulnId";

	private NamedParameterJdbcTemplate jdbcTemplateBdsVuln;

	@Inject
	public void setJdbcTemplateBdsVuln(final NamedParameterJdbcTemplate jdbcTemplateBdsVuln) {
		this.jdbcTemplateBdsVuln = jdbcTemplateBdsVuln;
	}
	public JdbcVulnerabilityDao() {

	}

	@Override
	public List<RequestVulnerabilityPojo> getVulnerabilitiesByRequestId(final String requestId) throws AppEditException {

		final int vulnId = 282177;

		final SqlParameterSource namedParameters = new MapSqlParameterSource("vulnId",
				vulnId);

		final List<Vulnerability> vulns;
		try {
			vulns = jdbcTemplateBdsVuln.query(SQL_FETCH_ONE_VULNERABILITY_BY_ID, namedParameters,
					new VulnerabilityMapper());
		} catch (final BadSqlGrammarException e) {
			final String msg = "Error getting Vulnerability with ID " + vulnId + ": " + e.getMessage();
			logger.error(msg);
			throw new AppEditException(msg);
		}

		final List<RequestVulnerabilityPojo> requestVulns = new ArrayList<>();

		for (final Vulnerability vuln : vulns) {

			final String vulnerabilityId = String.valueOf(vuln.getNvdCveId());
			final String vulnerabilityName = vuln.getName();
			final String description = vuln.getDescription();
			final String sevString = vuln.getSeverity();
			final VulnerabilitySeverity severity = getSeverity(sevString);
			final String baseScore = vuln.getBaseScore();
			final String exploitabilityScore = vuln.getExploitabilityScore();
			final String impactScore = vuln.getImpactScore();
			final Date dateCreated = vuln.getDateCreated();
			final Date dateModified = vuln.getDateModified();
			final Date datePublished = vuln.getDatePublished();
			final String reviewStatusName = "TODO"; // TODO
			final String comments = "TODO"; // TODO
			final Date targetRemediationDate = new Date(); // TODO
			final Date actualRemediationDate = new Date(); // TODO

			final RequestVulnerabilityPojo requestVuln = new RequestVulnerabilityPojo(vulnerabilityId,
					vulnerabilityName,
					description, severity, baseScore, exploitabilityScore, impactScore, dateCreated, dateModified,
					datePublished, requestId, comments, reviewStatusName, targetRemediationDate, actualRemediationDate);

			requestVulns.add(requestVuln);
		}

		return requestVulns;
	}

	private VulnerabilitySeverity getSeverity(final String sevString) {
		if ("Medium".equalsIgnoreCase(sevString)) {
			return VulnerabilitySeverity.MEDIUM;
		} else if ("High".equalsIgnoreCase(sevString)) {
			return VulnerabilitySeverity.MEDIUM;
		} else {
			return VulnerabilitySeverity.LOW;
		}
	}
}
